// https://www.smashingmagazine.com/2022/10/fluid-typography-clamp-sass-functions/
@function fluid($min-size, $max-size, $min-breakpoint, $max-breakpoint, $unit: vw) {
    $slope: math.div($max-size - $min-size, $max-breakpoint - $min-breakpoint);
    $slope-to-unit: $slope * 100;
    $intercept-rem: px-to-rem($min-size - $slope * $min-breakpoint);
    $min-size-rem: px-to-rem($min-size);
    $max-size-rem: px-to-rem($max-size);
    @return clamp(#{$min-size-rem}, #{$slope-to-unit}#{$unit} + #{$intercept-rem}, #{$max-size-rem});
}


// my failed attempt at mathing...

// fn that returns the middle parameter of a call to `clamp` for fluid type
// ex: font-size: font-size: clamp(2.25rem, 2vw + 1.5rem, 3.25rem);
// this returns the "2vw + 1.5rem" part

// relies HEAVILY on this amazing overview
// https://www.smashingmagazine.com/2022/01/modern-fluid-typography-css-clamp/#fluid-sizing-function


// /// Remove the unit of a length
// /// @param {Number} $number - Number to remove unit from
// /// @return {Number} - Unitless number
// @function strip-unit($number) {
//     @if type-of($number) == 'number' and not unitless($number) {
//       @return $number / ($number * 0 + 1);
//     }

//     @return $number;
//   }

// vw = viewport width
// fs = font size
// 1 = start  2 = end
// @function fluid-type-exp ($vw1: 480, $vw2: 1280, $fs1: 12, $fs2: 24) {
//     // $v: (100 * ($fs2 - $fs1)) / ($vw2 - $vw1); // 1200 /

//     // $fsDiff: $fs2 - $fs1;
//     // $fsDiffMultiplied: $fsDiff * 100;
//     // $vwDiff: $vw2 - $vw1;
//     // $v: $fsDiffMultiplied / $vwDiff;

//     $v: (100 * ($fs2 - $fs1)) / ($vw2 - $vw1);
//     $r: ( (($vw1 * $fs2) - ($vw2 * $fs1)) / ($vw1 - $vw2) ) / 16;

//     @return "#{$v}vw + #{$r}rem";

//     // @return "#{$v} + #{$r}";
// }

// "-1.5vw + 0.3pxrem"
