@use '../variables/colors' as *;
@use 'sass:list';

/**
* Rainbows
*/
$rainbow-width: 60px;

@function rainbow($angle: 90deg, $inverted: false, $width: $rainbow-width, $padding: 0%) {
  $stripe-width: calc($width / 5);
  $stops: ($angle, transparent 0%, transparent $padding);
  $stop-position: $padding;

  $rainbow-stop-colors: ($blue, $pink, $orange, $yellow, $green);
  @if ($inverted) {
    $rainbow-stop-colors: ($green, $yellow, $orange, $pink, $blue);
  }

  @for $i from 1 through 5 {
    $stops: list.join($stops, (list.nth($rainbow-stop-colors, $i) $stop-position));
    $stop-position: calc($stop-position + $stripe-width);
    $stops: list.join($stops, (list.nth($rainbow-stop-colors, $i) $stop-position));
  }

  $stops: list.join($stops, (transparent $stop-position, transparent 100%));

  @return linear-gradient($stops) no-repeat;
}


//        0
//   135     225
// 180         180
//   45      315
//        0
@mixin bezel($trapSS, $angle, $rainbow-width, $paddingT, $paddingL) {
  $width: 800px; // fixed

  $point-L1: $trapSS (($width / 2) + ($trapSS / 2) + 24px);
  $point-S1: 0px (($width / 2) + ($trapSS / 2));
  $point-S2: 0px (($width / 2) - ($trapSS / 2));
  $point-L2: $trapSS (($width / 2) - ($trapSS / 2) - 24px);
  $point-Sq1: $trapSS 0px;
  $point-Sq2: $width 0px;
  $point-Sq3: $width $width;
  $point-Sq4: $trapSS $width;

  position: absolute;
  top: 0;
  left: calc(calc($paddingT - ($rainbow-width / 2)) - ($width / 2));
  width: $width;
  height: $width;
  background: rainbow($width: $rainbow-width, $angle: 90deg), $white;
  clip-path: polygon($point-L1, $point-S1, $point-S2,  $point-L2, $point-Sq1, $point-Sq2, $point-Sq3, $point-Sq4);
  transform-origin: $point-S1;
  transform: rotate($angle);
}

$rainbow-width: 80px;
$paddingL: 800px;
$paddingT: 250px;

// .section-title {
//   position: relative;
//   background: rainbow($width: $rainbow-width, $padding: $paddingL),
//               rainbow($width: $rainbow-width, $angle: 180deg, $padding: $paddingT),
//               lightblue;
//   padding-bottom: 164px;

//   .bezel-1 {
//     @include bezel($trapSS: $rainbow-width, $angle: 45deg, $rainbow-width: $rainbow-width, $paddingT: $paddingT, $paddingL: $paddingL)
//   }

//   .bezel-2 {

//   }
// }

// .section-about {
//   background: linear-gradient(rainbow($width: 80px, $angle: 180deg));
//   padding-top: 64px;
// }

// .rainbow-left {
//   background: linear-gradient(rainbow());
// }

// .rainbow-right {
//   background: linear-gradient(rainbow($width: $rainbow-width, $padding: 90%));
// }

// .rainbow-left-right-top {
//   background: linear-gradient(rainbow()),
//     linear-gradient(rainbow($width: $rainbow-width, $padding: 90%)),
//     linear-gradient(rainbow($angle: 180deg, $width: $rainbow-width));
// }

// // .rainbow-top {
// //   background: linear-gradient(rainbow($width: 40px, $angle: 180deg));
// // }

// .rainbow-left-2 {
//   background: linear-gradient(rainbow($width: $rainbow-width));
// }


// .bezel-1 {
//   position: absolute;
//   width: 200px;
//   height: 200px;
//   top: -150px;
//   right: 62px;
//   background: linear-gradient(rainbow($width: 60px, $angle: 135deg));
// }

// .bezel-container {
//   position: relative;
// }

.page {
  position: relative;
  background-color: transparent;
}

#canvas {
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  background-color: lightblue;
}
