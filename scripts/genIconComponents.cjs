var fsp = require('fs/promises');
const path = require('path');

const componentsPath = './src/icons';
const svgFilesPath = './public/assets/icons';
const storiesPath = './src/icons';
const manifestPath = './stories/manifests';

const storyContent = (componentName) => {
  return `// this file was generated by the generateIconComponents.cjs script
import type { Meta, StoryObj } from '@storybook/react';

import { ${componentName} } from './${componentName}.tsx';

const meta = {
  title: 'Icons/components/${componentName}',
  component: ${componentName},
  tags: ['autodocs'],
  parameters: {},
  args: {},
} satisfies Meta<typeof ${componentName}>;

export default meta;
type Story = StoryObj<typeof meta>;
export const Default: Story = {};
`};

const manifestContent = (componentNames) => {
  return `{/* this file was generated by the generateIconComponents.cjs script */}\n
${componentNames.map((componentName) => `import { ${componentName} } from "@src/icons/${componentName}";\n`).join('')}
${componentNames.map((componentName) => `<${componentName}></${componentName}>\n`).join('')}
`};

const componentContent = (componentName, svgContent, svgIconName) => {
  return `// this file was generated by the generateIconComponents.cjs script
export const ${componentName} = () => {
    return (
    <span className="icon icon-${svgIconName}">
${svgContent}
    </span>
    );
}`};

async function deleteOldFiles(componentsPath) {
  try {
    const filenames = await fsp.readdir(componentsPath);
    console.log(`deleting existing components and stories: \n${filenames.join('\n')}\n\n`)

    const deleteFilePromises = filenames.map(filename =>
      fsp.unlink(path.join(componentsPath, filename)),
    );

    await Promise.all(deleteFilePromises);
  } catch (err) {
    console.log(err);
  }
}

async function createNewFiles(svgFilesPath, componentsPath) {
  try {
    const svgFilenames = (await fsp.readdir(svgFilesPath)).filter(filename => /.*\.svg$/.test(filename));
    console.log(`creating components for: \n${svgFilenames.join('\n')}\n\n`)

    const writeFilePromises = svgFilenames.map(async svgFilename => {
      const svgIconFullPath = path.join(svgFilesPath, svgFilename);
      const svgIconName = svgFilename.slice(0, -4);

      const componentName = svgIconName
        .replace(/^(.{1})/, (s) => s.toUpperCase()) // uppercase
        .replaceAll(/(-.{1})/g, s => s.charAt(1).toUpperCase())// uppercase + no hyphens
        .concat('Icon'); // add the word "Icon" at the end
      const componentFileName = path.join(componentsPath, componentName + '.tsx');

      const svgContent = (await fsp.readFile(svgIconFullPath, "utf8"))
        .replaceAll('xmlns:xlink', 'xmlnsXlink')
        .replaceAll('xlink:href', 'xlinkHref')
        .replaceAll('class', 'className');

      fsp.writeFile(componentFileName, componentContent(componentName, svgContent, svgIconName))
    })

    await Promise.all(writeFilePromises);
  } catch (err) {
    console.log(err);
  }
}

async function createManifest(componentsPath, manifestPath) {
  const format = (compName) => compName.slice(0, -4);

  try {
    console.log(`rewriting mdx manifest`)
    const componentFileNames = (await fsp.readdir(componentsPath)).filter(filename => /.*\.tsx$/.test(filename));

    await fsp.writeFile(path.join(manifestPath, 'IconsManifest.mdx'), manifestContent(componentFileNames.map(format)));
  } catch (err) {
    console.log(err);
  }
}

async function createStories(storiesPath, componentsPath) {
  try {
    console.log(`writing stories`);
    const removeExt = (compName) => compName.slice(0, -4);
    const componentNames = (await fsp.readdir(componentsPath)).filter(filename => /.*\.tsx$/.test(filename)).map(removeExt);
    const writeFilePromises = (await componentNames.map((componentName) => {
      const storyPath = path.join(storiesPath, componentName + '.stories.ts')
      return fsp.writeFile(storyPath, storyContent(componentName));
    }));
    await Promise.all(writeFilePromises);
  } catch (err) {
    console.log(err);
  }
}

async function run() {
  await deleteOldFiles(componentsPath);
  await createNewFiles(svgFilesPath, componentsPath);
  await createManifest(componentsPath, manifestPath);
  await createStories(storiesPath, componentsPath);
}

run();